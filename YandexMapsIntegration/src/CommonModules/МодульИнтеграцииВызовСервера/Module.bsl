#Область ПрограммныйИнтерфейс

// Получить места.
// 
// Параметры:
//  ТекстПоиска - Строка - Текст поиска
// 
// Возвращаемое значение:
//  Произвольный - Получить места
Функция ПолучитьМеста(ТекстПоиска = "") Экспорт
	АдресСервера = "suggest.api.mappable.world";
	СоединениеССервером = ПолучитьСоединение(АдресСервера);//HTTPСоединение

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Ресурс = "v1/suggest";

	//@skip-check undefined-variable
	ТелоЗапроса = СтрШаблон("?apikey=%1&text=%2&lang=az_AZ&print_address=1&attrs=uri&ll=47.954447,40.358252&spn=0.5,0.3",
		Константы.MappableAPIKey.Получить(), ТекстПоиска);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс + ТелоЗапроса, Заголовки);
	Результат = СоединениеССервером.ВызватьHTTPМетод("GET", HTTPЗапрос);//HTTPОтвет
	Ответ = Результат.ПолучитьТелоКакСтроку();

	СтруктураОтвета = ПолучитьДанныеИзJSON(Ответ);

	Возврат СтруктураОтвета;

КонецФункции


// Получить координаты места.
// 
// Параметры:
//  uri - Строка - uri
// 
// Возвращаемое значение:
//  Произвольный - Получить координаты места
Функция ПолучитьКоординатыМеста(uri = "") Экспорт
	АдресСервера = "geocoder.api.mappable.world";
	СоединениеССервером = ПолучитьСоединение(АдресСервера);//HTTPСоединение

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Ресурс = "v1/";

	//@skip-check undefined-variable
	ТелоЗапроса = СтрШаблон("?apikey=%1&uri=%2&lang=az_AZ", Константы.MappableAPIKey.Получить(), uri);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс + ТелоЗапроса, Заголовки);
	Результат = СоединениеССервером.ВызватьHTTPМетод("GET", HTTPЗапрос);//HTTPОтвет
	Ответ = Результат.ПолучитьТелоКакСтроку();

	СтруктураОтвета = ПолучитьДанныеИзJSON(Ответ);

	Возврат СтруктураОтвета;

КонецФункции



// Получить данные расчета расстояния и времени.
// 
// Параметры:
//  НачальнаяТочка - Структура - Начальная точка:
// * Широта 
// * Долгота   
//  ТочкаНазначения - Структура - Точка назначения:
// * Широта 
// * Долгота  
// 
// Возвращаемое значение:
//  Структура - Получить данные расчета расстояния и времени:
// * Расстояние 
// * Время
Функция ПолучитьДанныеРасчетаРасстоянияИВремени(НачальнаяТочка, ТочкаНазначения) Экспорт

	АдресСервера = "distancematrix.api.mappable.world";
	СоединениеССервером = ПолучитьСоединение(АдресСервера);//HTTPСоединение

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Ресурс = "v2/";

	//@skip-check undefined-variable
	ТелоЗапроса = СтрШаблон("?origins=%1,%2&destinations=%3,%4&apikey=%5&mode=driving", НачальнаяТочка.Широта, НачальнаяТочка.Долгота,
		ТочкаНазначения.Широта, ТочкаНазначения.Долгота, Константы.MappableAPIKey.Получить());

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс + ТелоЗапроса, Заголовки);
	Результат = СоединениеССервером.ВызватьHTTPМетод("GET", HTTPЗапрос);//HTTPОтвет
	Ответ = Результат.ПолучитьТелоКакСтроку();

	СтруктураОтветаЗапрса = ПолучитьДанныеИзJSON(Ответ);

    
    СтруктураОтвета = Новый Структура("Расстояние,Время");

	Если СтруктураОтветаЗапрса.Свойство("rows") Тогда
         Если СтруктураОтветаЗапрса.rows.Количество() > 0 тогда
            ПолученныеДанные = СтруктураОтветаЗапрса.rows.Получить(0).elements.Получить(0);
            
            СтруктураОтвета.Расстояние = ПолученныеДанные.distance.value; //дистанция в метрах
            СтруктураОтвета.Время = ПолученныеДанные.duration.value;      // время в секундах                                	
         КонецЕсли;	
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции




// Получить соединение.
// 
// Параметры:
//  АдресСервера - Строка - Адрес сервера
// 
// Возвращаемое значение:
//  HTTPСоединение - Получить соединение
Функция ПолучитьСоединение(АдресСервера = "")
	Возврат Новый HTTPСоединение(АдресСервера, , , , , , Новый ЗащищенноеСоединениеOpenSSL);
КонецФункции




// Получить данные из JSON.
// 
// Параметры:
//  ТелоЗапроса - Строка - Тело запроса
//  ПараметрыДата - Строка - Параметры дата
// 
// Возвращаемое значение:
//  Произвольный - Получить данные из JSON
Функция ПолучитьДанныеИзJSON(ТелоЗапроса = "", ПараметрыДата = "") Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);

	Возврат ПрочитатьJSON(ЧтениеJSON, , ПараметрыДата);
КонецФункции



// Сериализовать JSON.
// 
// Параметры:
//  ДанныеСериализации - Структура - Данные сериализации:
// 
// Возвращаемое значение:
//  Строка - Сериализовать JSON
Функция СериализоватьJSON(ДанныеСериализации) Экспорт

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеСериализации);

	Возврат ЗаписьJSON.Закрыть();
КонецФункции
#КонецОбласти